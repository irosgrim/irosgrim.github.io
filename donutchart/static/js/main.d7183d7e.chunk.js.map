{"version":3,"sources":["components/Donutchart.jsx","App.js","serviceWorker.js","index.js"],"names":["Donutchart","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","info","handleSectionSize","bind","assertThisInitialized","amount","amountarr","val","chartfrom","items","push","reducer","tot","current_val","slice","budget","undefined","reduce","toFixed","_this2","_this$props$chartfrom","baseColor","thickness","holeColor","circleArr","JSON","parse","stringify","sections","key","hasOwnProperty","startFrom","parseFloat","split","concat","toConsumableArray","console","log","circles","map","circle","index","react_default","a","createElement","id","label","className","cx","cy","r","fill","stroke","sectionColor","strokeWidth","strokeDasharray","strokeDashoffset","width","height","viewBox","x","y","dx","style","listStyleType","title","fontWeight","item","display","alignItems","float","marginRight","borderRadius","backgroundColor","borderTop","paddingTop","marginTop","Component","App","components_Donutchart","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7183d7e.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\n/* \nInspired by: https://medium.com/@heyoka/scratch-made-svg-donut-pie-charts-in-html5-2c587e935d72 by Mark Caron\n\nEach circle strokeDashoffset depends on the previous circle and can be calculated like this:\nCircumference - previous_circle_length + previous_circle_strokeDashoffset\n\n                100 - stroke-dasharray[0] + previousCircle.strokeDashoffset\n\n*/\nclass Donutchart extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tinfo: 'food'\n\t\t};\n\t\tthis.handleSectionSize = this.handleSectionSize.bind(this);\n\t}\n\n\thandleSectionSize(amount) {\n\t\tconst amountarr = [];\n\t\tfor (let val in this.props.chartfrom.items) {\n\t\t\tamountarr.push(this.props.chartfrom.items[val].amount);\n\t\t}\n\t\tconst reducer = (tot, current_val) => {\n\t\t\treturn (tot += current_val);\n\t\t};\n\n\t\tconst total =\n\t\t\tthis.props.chartfrom.budget !== 0 &&\n\t\t\tthis.props.chartfrom.budget !== null &&\n\t\t\tthis.props.chartfrom.budget !== undefined &&\n\t\t\tthis.props.chartfrom.budget > amountarr.reduce(reducer)\n\t\t\t\t? this.props.chartfrom.budget\n\t\t\t\t: amountarr.reduce(reducer);\n\t\tconst slice = ((100 * amount) / total).toFixed(1);\n\t\tconst arr = slice + ' ' + (100 - slice);\n\t\treturn arr;\n\t}\n\trender() {\n\t\tconst { baseColor, thickness, holeColor } = this.props.chartfrom;\n\t\t//make a copy of the items array props\n\t\tconst circleArr = JSON.parse(JSON.stringify(this.props.chartfrom.items));\n\t\tlet sections = [];\n\t\t//calculate section size for each item\n\t\tfor (let key in circleArr) {\n\t\t\tif (circleArr.hasOwnProperty(key)) {\n\t\t\t\tcircleArr[key].amount = this.handleSectionSize(circleArr[key].amount);\n\t\t\t\tif (key > 0) {\n\t\t\t\t\t//calculate section position based on the first section\n\t\t\t\t\tcircleArr[key].startFrom =\n\t\t\t\t\t\t100 -\n\t\t\t\t\t\tparseFloat(circleArr[key - 1].amount.split(' ')[0]) +\n\t\t\t\t\t\tcircleArr[key - 1].startFrom;\n\t\t\t\t}\n\t\t\t\tsections = [...sections, circleArr[key]];\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(this.props.chartfrom.items[0].amount);\n\n\t\tconst circles = sections.map((circle, index) => {\n\t\t\treturn (\n\t\t\t\t<circle\n\t\t\t\t\tkey={index}\n\t\t\t\t\tid={circle.label + '_' + index}\n\t\t\t\t\tclassName=\"donut-segment\"\n\t\t\t\t\tcx=\"21\"\n\t\t\t\t\tcy=\"21\"\n\t\t\t\t\tr=\"15.91549430918954\"\n\t\t\t\t\tfill=\"transparent\"\n\t\t\t\t\tstroke={circle.sectionColor}\n\t\t\t\t\tstrokeWidth=\"5\"\n\t\t\t\t\tstrokeDasharray={circle.amount}\n\t\t\t\t\tstrokeDashoffset={circle.startFrom}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\tconst amountarr = [];\n\n\t\tfor (let val in this.props.chartfrom.items) {\n\t\t\tamountarr.push(this.props.chartfrom.items[val].amount);\n\t\t}\n\t\tconst total = (tot, current_val) => {\n\t\t\treturn (tot += current_val);\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"donut-chart\">\n\t\t\t\t<svg width=\"100%\" height=\"100%\" viewBox=\"0 0 42 42\" className=\"donut\">\n\t\t\t\t\t<circle\n\t\t\t\t\t\tclassName=\"donut-hole\"\n\t\t\t\t\t\tcx=\"21\"\n\t\t\t\t\t\tcy=\"21\"\n\t\t\t\t\t\tr=\"15.91549430918954\"\n\t\t\t\t\t\tfill={holeColor}\n\t\t\t\t\t/>\n\t\t\t\t\t<circle\n\t\t\t\t\t\tclassName=\"donut-ring base\"\n\t\t\t\t\t\tcx=\"21\"\n\t\t\t\t\t\tcy=\"21\"\n\t\t\t\t\t\tr=\"15.91549430918954\"\n\t\t\t\t\t\tfill=\"transparent\"\n\t\t\t\t\t\tstroke={baseColor}\n\t\t\t\t\t\tstrokeWidth={thickness}\n\t\t\t\t\t/>\n\t\t\t\t\t{circles}\n\n\t\t\t\t\t<g className=\"main-label\">\n\t\t\t\t\t\t<text x=\"50%\" y=\"50%\" dx=\"-1px\">\n\t\t\t\t\t\t\t{/* this.props.chartfrom.budget < amountarr.reduce(total)\n\t\t\t\t\t\t\t\t? amountarr.reduce(total)\n\t\t\t\t\t\t\t\t: this.props.chartfrom.budget */}\n\t\t\t\t\t\t</text>\n\t\t\t\t\t</g>\n\t\t\t\t</svg>\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<ul className=\"info-list\" style={{ listStyleType: 'none' }}>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\t{this.props.title}\n\t\t\t\t\t\t\t\t{/* this.props.chartfrom.budget < amountarr.reduce(total)\n\t\t\t\t\t\t\t\t\t? amountarr.reduce(total)\n\t\t\t\t\t\t\t\t\t: amountarr.reduce(total) +\n\t\t\t\t\t\t\t\t\t  ' out of ' +\n\t\t\t\t\t\t\t\t\t  this.props.chartfrom.budget */}\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<div style={{ fontWeight: '500' }}>\n\t\t\t\t\t\t\t\t{this.props.chartfrom.budget || ''}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t\t{sections.map((item, index) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<li\n\t\t\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\t\t\tstyle={{ display: 'flex', alignItems: 'center' }}>\n\t\t\t\t\t\t\t\t\t<div className=\"thin\">\n\t\t\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\t\t\tfloat: 'left',\n\t\t\t\t\t\t\t\t\t\t\t\theight: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\twidth: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tmarginRight: '10px',\n\t\t\t\t\t\t\t\t\t\t\t\tborderRadius: ' 3px',\n\t\t\t\t\t\t\t\t\t\t\t\tbackgroundColor: item.sectionColor\n\t\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t{item.label}\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div className=\"bold\">\n\t\t\t\t\t\t\t\t\t\t{this.props.chartfrom.items[index].amount}\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t{/* +\n\t\t\t\t\t\t\t\t\t\t' ' +\n\t\t\t\t\t\t\t\t\t\tthis.props.chartfrom.items[index].amount +\n\t\t\t\t\t\t\t\t\t\t` (${item.amount.split(' ')[0]}%)` */}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t\t<li\n\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\tdisplay: 'flex',\n\t\t\t\t\t\t\t\talignItems: 'center',\n\t\t\t\t\t\t\t\tborderTop: '1px solid #eaeaea',\n\t\t\t\t\t\t\t\tpaddingTop: '5px',\n\t\t\t\t\t\t\t\tmarginTop: '5px'\n\t\t\t\t\t\t\t}}>\n\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t<div\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tfloat: 'left',\n\t\t\t\t\t\t\t\t\t\theight: '10px',\n\t\t\t\t\t\t\t\t\t\twidth: '10px',\n\t\t\t\t\t\t\t\t\t\tmarginRight: '10px',\n\t\t\t\t\t\t\t\t\t\tborderRadius: ' 3px'\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\tTOTAL:\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div>{amountarr.reduce(total)}</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Donutchart;\n","import React, { Component } from 'react';\nimport Donutchart from './components/Donutchart';\nimport './styles/App.css';\n\nclass App extends Component {\n\trender() {\n\t\tconst budget = {\n\t\t\tbudget: 22000,\n\t\t\tbaseColor: '#e8e8e8', //this is the 100% base circle\n\t\t\tthickness: '5', // circle size\n\t\t\tholeColor: 'transparent', //the hole is transparent but it can be any color ex #ffffff\n\t\t\titems: [\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Food', //label of the item\n\t\t\t\t\tsectionColor: '#8acc81', //color of the sections\n\t\t\t\t\tamount: 8500, //value of the section\n\t\t\t\t\tstartFrom: 25 //first item should always have a startFrom value > 0, next items will have a startFrom 0\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Bank',\n\t\t\t\t\tsectionColor: '#e77d53',\n\t\t\t\t\tamount: 5500,\n\t\t\t\t\tstartFrom: 0\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Electricity',\n\t\t\t\t\tsectionColor: '#bd53e7',\n\t\t\t\t\tamount: 750,\n\t\t\t\t\tstartFrom: 0\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Water',\n\t\t\t\t\tsectionColor: '#6ea4b4',\n\t\t\t\t\tamount: 558,\n\t\t\t\t\tstartFrom: 0\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tlabel: 'Other stuff',\n\t\t\t\t\tsectionColor: '#e7b853',\n\t\t\t\t\tamount: 1500,\n\t\t\t\t\tstartFrom: 0\n\t\t\t\t}\n\t\t\t]\n\t\t};\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t<Donutchart chartfrom={budget} title=\"Budget\" />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}