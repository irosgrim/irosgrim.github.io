{"version":3,"sources":["components/Editor.js","components/Notes.js","App.js","serviceWorker.js","index.js"],"names":["Editor","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","selected","title","note","handleChange","bind","assertThisInitialized","event","setState","target","value","handleedit","react_default","a","createElement","className","name","cols","rows","onChange","Component","Notes","loadData","values","clicked","_this2","children","map","key","onClick","App","handleEdit","handleClicked","e","concat","components_Notes","components_Editor","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9cdaac2f.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Editor extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tid: this.props.selected.id,\n\t\t\ttitle: this.props.selected.title,\n\t\t\tnote: this.props.note\n\t\t};\n\n\t\tthis.handleChange = this.handleChange.bind(this);\n\t}\n\n\thandleChange(event) {\n\t\tthis.setState({ note: event.target.value });\n\t\tthis.props.handleedit(event.target.value);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"editor frame\">\n\t\t\t\t<h2>Editor component</h2>\n\t\t\t\t<p>\n\t\t\t\t\tWhen I click on any of the list items on the left, <br /> i want this\n\t\t\t\t\tcomponent to get that item, as props or somehow. I want the textarea\n\t\t\t\t\tto get that item as value and i <br /> want to be able to edit it and\n\t\t\t\t\tsave it.\n\t\t\t\t</p>\n\t\t\t\t<p>Parent state.selected note as props: {this.props.note}</p>\n\t\t\t\t<p>this.state.id should be equal to the props: {this.state.id}</p>\n\n\t\t\t\t<textarea\n\t\t\t\t\tname=\"editor\"\n\t\t\t\t\tid=\"editor\"\n\t\t\t\t\tcols=\"30\"\n\t\t\t\t\trows=\"10\"\n\t\t\t\t\tvalue={this.state.note}\n\t\t\t\t\tonChange={this.handleChange}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Editor;\n","import React, { Component } from 'react';\n\nclass Notes extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.loadData = this.loadData.bind(this);\n\t\tthis.state = {\n\t\t\tvalues: []\n\t\t};\n\t}\n\tloadData(id) {\n\t\tthis.setState({\n\t\t\tvalues: this.props.values[id]\n\t\t});\n\t\tthis.props.clicked(id);\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"list frame\">\n\t\t\t\t<h2>{this.props.children}</h2>\n\t\t\t\t<ul>\n\t\t\t\t\t{this.props.values.map((note, id) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<li key={id} onClick={this.loadData.bind(this, note)}>\n\t\t\t\t\t\t\t\t<h3>{note.title}</h3>\n\t\t\t\t\t\t\t\t<p>{note.note}</p>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t);\n\t\t\t\t\t})}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default Notes;\n","import React, { Component } from 'react';\nimport Editor from './components/Editor';\nimport Notes from './components/Notes';\n\nimport './components/App.css';\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.handleEdit = this.handleEdit.bind(this);\n\t\tthis.handleClicked = this.handleClicked.bind(this);\n\t\tthis.state = {\n\t\t\tvalues: [\n\t\t\t\t{ id: 0, title: 'First entry', note: 'Hello world' },\n\t\t\t\t{ id: 1, title: 'Second', note: 'This is note two' },\n\t\t\t\t{ id: 2, title: 'Third', note: 'Entry number three' },\n\t\t\t\t{ id: 3, title: 'Fourth', note: 'Note number 4' }\n\t\t\t],\n\t\t\tselected: {}\n\t\t};\n\t}\n\thandleEdit(e) {\n\t\tthis.setState({ value: e });\n\t}\n\thandleClicked(e) {\n\t\tthis.setState({ selected: e });\n\t}\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h3>The App component</h3>\n\t\t\t\t<p>Selected state value: {this.state.selected.note}</p>\n\t\t\t\t<pre>\n\t\t\t\t\t{`this.state = {\n            values: [\n                      { id: 0, title: 'First entry', note: 'Hello world' }, \n                      { id: 1, title: 'Second', note: 'This is note two' },\n                      { id: 2, title: 'Third', note: 'Entry number three' },\n                      { id: 3, title: 'Fourth', note: 'Note number 4' }\n                    ],\n            selected: { id: ${this.state.selected.id}, title: '${\n\t\t\t\t\t\tthis.state.selected.title\n\t\t\t\t\t}', note: '${this.state.selected.note}' }\n            };\n          `}\n\t\t\t\t</pre>\n\n\t\t\t\t<div className=\"wrapper\">\n\t\t\t\t\t<Notes\n\t\t\t\t\t\tvalues={this.state.values}\n\t\t\t\t\t\tclicked={this.handleClicked}\n\t\t\t\t\t\tclassName=\"list frame\">\n\t\t\t\t\t\tThe notes component\n\t\t\t\t\t</Notes>\n\t\t\t\t\t<Editor handleedit={this.handleEdit} selected={this.state.selected} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}